[{"D:\\Visual Studio Code\\Projects\\Recreate-Netflix\\netflix-app\\src\\index.js":"1","D:\\Visual Studio Code\\Projects\\Recreate-Netflix\\netflix-app\\src\\App.js":"2","D:\\Visual Studio Code\\Projects\\Recreate-Netflix\\netflix-app\\src\\Connections\\TMDB.js":"3","D:\\Visual Studio Code\\Projects\\Recreate-Netflix\\netflix-app\\src\\Components\\FeatureMovie\\index.jsx":"4","D:\\Visual Studio Code\\Projects\\Recreate-Netflix\\netflix-app\\src\\Components\\MovieRow\\index.jsx":"5"},{"size":199,"mtime":1611716247029,"results":"6","hashOfConfig":"7"},{"size":1316,"mtime":1612011941587,"results":"8","hashOfConfig":"7"},{"size":2204,"mtime":1612011897385,"results":"9","hashOfConfig":"7"},{"size":1820,"mtime":1612490614698,"results":"10","hashOfConfig":"7"},{"size":652,"mtime":1612010857221,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1cp0lmf",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"14"},"D:\\Visual Studio Code\\Projects\\Recreate-Netflix\\netflix-app\\src\\index.js",[],["26","27"],"D:\\Visual Studio Code\\Projects\\Recreate-Netflix\\netflix-app\\src\\App.js",["28"],"import React, {useEffect, useState} from 'react'\n\nimport MovieRow from \"./Components/MovieRow\"\nimport FeatureMovie from './Components/FeatureMovie'\n\nimport './App.css';\n\nimport TMDB from \"../src/Connections/TMDB\"\n\n\n\nexport default () => {\n\n  const [movieLists, setMovieLists] = useState([]);\n  const [selectedMovie, setSelectedMovie] = useState(null)\n\n\n  useEffect(() => {\n  \n    const loadAll = async () => {\n  \n      let list = await TMDB.getHomeList()\n      \n      console.log(list)\n\n      setMovieLists(list)\n\n      let original = list.filter(movieList => movieList.slug === 'original')\n\n      let randomChosen = Math.floor(Math.random() * (original[0].items.results.length - 1 ))\n\n      let chosen = original[0].items.results[randomChosen]\n      let chosenInfo = await TMDB.getInfo(chosen.id, 'tv')\n\n      setSelectedMovie(chosenInfo)\n\n      console.log(\"ESCOLHIDO\")\n      console.log(chosenInfo)\n\n    }\n  \n    loadAll();\n  \n  }, [])\n\n\n  return(\n    <div className=\"Page\">\n\n      {selectedMovie && \n        <FeatureMovie movie={selectedMovie}/>}\n\n      <section className=\"Lists\">\n\n      {console.log(movieLists)}\n\n       {movieLists.map((movieList, key) =>(\n         \n         <MovieRow key={key} itens={movieList.items} title={movieList.title} />\n         \n       ))}\n\n      </section>\n      \n    </div>\n  )\n}","D:\\Visual Studio Code\\Projects\\Recreate-Netflix\\netflix-app\\src\\Connections\\TMDB.js",["29"],"const  {API_KEY, API_BASE} = require(\"../config/TMDB.json\")\r\nconst CONFIG = `api_key=${API_KEY}&language=pt-BR`\r\n\r\nconst basicFetch = async (endPoint) => {\r\n\r\n    const req = await fetch(`${API_BASE}${endPoint}`)\r\n    const json = await req.json();\r\n\r\n    return json\r\n}\r\n\r\nexport default {\r\n\r\n    getHomeList: async () => {\r\n\r\n        return [\r\n    \r\n            {\r\n                slug: 'original',\r\n                title: 'Originais da Netflix',\r\n                items: await basicFetch(`/discover/tv?${CONFIG}&with_network=213`)\r\n            },\r\n            \r\n            {\r\n                slug: 'trending',\r\n                title: 'Recomendados',\r\n                items: await basicFetch(`/trending/all/week?${CONFIG}`)\r\n            },\r\n    \r\n            {\r\n                slug: 'top rated',\r\n                title: 'Em Alta',\r\n                items: await basicFetch(`/movie/top_rated?${CONFIG}`)\r\n            },\r\n    \r\n            {\r\n                slug: 'Action',\r\n                title: 'Ação',\r\n                items: await basicFetch(`/discover/movie?with_genres=28&${CONFIG}`)\r\n            },\r\n    \r\n            {\r\n                slug: 'comedy',\r\n                title: 'Comédia',\r\n                items: await basicFetch(`/discover/movie?with_genres=35&${CONFIG}`)\r\n            },\r\n            \r\n            {\r\n                slug: 'horror',\r\n                title: 'Terror',\r\n                items: await basicFetch(`/discover/movie?with_genres=27&${CONFIG}`)\r\n            },\r\n            \r\n            {\r\n                slug: 'romance',\r\n                title: 'Romance',\r\n                items: await basicFetch(`/discover/movie?with_genres=10749&${CONFIG}`)\r\n            },\r\n            \r\n            {\r\n                slug: 'documentary',\r\n                title: 'Documentario',\r\n                items: await basicFetch(`/discover/movie?with_genres=99&${CONFIG}`)\r\n            },\r\n        ];\r\n    },\r\n\r\n    getInfo: async (id, type) => {\r\n\r\n        //type - movie // tv(serie)\r\n\r\n        let info = {}\r\n\r\n        if(id){\r\n            if(type){\r\n                info = await basicFetch(`/${type}/${id}?${CONFIG}`)\r\n            }\r\n        }\r\n        return info;\r\n    }\r\n    \r\n}","D:\\Visual Studio Code\\Projects\\Recreate-Netflix\\netflix-app\\src\\Components\\FeatureMovie\\index.jsx",["30"],"D:\\Visual Studio Code\\Projects\\Recreate-Netflix\\netflix-app\\src\\Components\\MovieRow\\index.jsx",["31"],"import React from 'react'\r\nimport './MovieRow.css'\r\n\r\nexport default ({title, itens}) => {\r\n    \r\n    return(\r\n        <div className=\"MovieRow\">\r\n\r\n          <h2 className=\"Title\">{title}</h2>\r\n\r\n          <div className=\"MovieRow--ListArea\">\r\n            <div className=\"MovieRow--List\">\r\n\r\n            {itens.results.length > 0 && itens.results.map((movie, key) => (\r\n\r\n              <div className=\"MovieRow--Item\">\r\n                <img src= {`https://image.tmdb.org/t/p/w300${movie.poster_path}`} alt={itens.original_title}/>\r\n              </div>\r\n              \r\n            ))}\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n    )\r\n}",{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":12,"column":1,"nodeType":"38","endLine":67,"endColumn":2},{"ruleId":"36","severity":1,"message":"39","line":12,"column":1,"nodeType":"38","endLine":82,"endColumn":2},{"ruleId":"36","severity":1,"message":"37","line":5,"column":1,"nodeType":"38","endLine":65,"endColumn":2},{"ruleId":"36","severity":1,"message":"37","line":4,"column":1,"nodeType":"38","endLine":26,"endColumn":2},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","Assign object to a variable before exporting as module default","no-global-assign","no-unsafe-negation"]