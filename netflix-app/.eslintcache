[{"D:\\Visual Studio Code\\Projects\\Recreate-Netflix\\netflix-app\\src\\index.js":"1","D:\\Visual Studio Code\\Projects\\Recreate-Netflix\\netflix-app\\src\\App.js":"2","D:\\Visual Studio Code\\Projects\\Recreate-Netflix\\netflix-app\\src\\Connections\\TMDB.js":"3","D:\\Visual Studio Code\\Projects\\Recreate-Netflix\\netflix-app\\src\\Components\\FeatureMovie\\index.jsx":"4","D:\\Visual Studio Code\\Projects\\Recreate-Netflix\\netflix-app\\src\\Components\\MovieRow\\index.jsx":"5","D:\\Visual Studio Code\\Projects\\Recreate-Netflix\\netflix-app\\src\\Components\\Header\\index.jsx":"6"},{"size":199,"mtime":1611716247029,"results":"7","hashOfConfig":"8"},{"size":3074,"mtime":1612620978266,"results":"9","hashOfConfig":"8"},{"size":2204,"mtime":1612011897385,"results":"10","hashOfConfig":"8"},{"size":1820,"mtime":1612493058443,"results":"11","hashOfConfig":"8"},{"size":1031,"mtime":1612668132813,"results":"12","hashOfConfig":"8"},{"size":726,"mtime":1612619364855,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1cp0lmf",{"filePath":"17","messages":"18","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"16"},"D:\\Visual Studio Code\\Projects\\Recreate-Netflix\\netflix-app\\src\\index.js",[],["31","32"],"D:\\Visual Studio Code\\Projects\\Recreate-Netflix\\netflix-app\\src\\App.js",["33","34","35","36","37","38","39","40","41"],"import React, {useEffect, useState} from 'react'\n\nimport MovieRow from \"./Components/MovieRow\"\nimport FeatureMovie from './Components/FeatureMovie'\nimport Header from './Components/Header'\n\nimport './App.css';\n\nimport TMDB from \"../src/Connections/TMDB\"\n\n\n\nexport default () => {\n\n  const [movieLists, setMovieLists] = useState([]);\n  const [selectedMovie, setSelectedMovie] = useState(null)\n  const [isHeaderBlack, setIsHeaderBlack] = useState(false)\n\n\n  useEffect(() => {\n  \n    const loadAll = async () => {\n  \n      let list = await TMDB.getHomeList()\n      \n      console.log(list)\n\n      setMovieLists(list)\n\n      let original = list.filter(movieList => movieList.slug === 'original')\n\n      let randomChosen = Math.floor(Math.random() * (original[0].items.results.length - 1 ))\n\n      let chosen = original[0].items.results[randomChosen]\n      let chosenInfo = await TMDB.getInfo(chosen.id, 'tv')\n\n      setSelectedMovie(chosenInfo)\n\n      console.log(\"ESCOLHIDO\")\n      console.log(chosenInfo)\n\n    }\n  \n    loadAll();\n\n  }, [])\n\n\n  useEffect(()=> {\n\n    const scrollListener = () => {\n\n      if(window.scrollY > 50){\n        setIsHeaderBlack(true)\n      }else{\n        setIsHeaderBlack(false)\n      }\n\n    }\n\n    window.addEventListener('scroll',scrollListener)\n\n    return () => {\n      window.removeEventListener('scroll',scrollListener)\n    }\n\n  },[])\n\n  return(\n\n    <div className=\"Page\">\n\n      <Header isBlack={isHeaderBlack}/>\n\n      {selectedMovie && \n        <FeatureMovie movie={selectedMovie}/>}\n\n      <section className=\"Lists\">\n\n      {console.log(movieLists)}\n\n       {movieLists.map((movieList, key) =>(\n         \n         <MovieRow key={key} itens={movieList.items} title={movieList.title} />\n         \n       ))}\n\n      </section>\n      \n      <footer>\n      \n            <p>\n                Copyright &copy; NETFLIX Brasil. Todos Direitos Reservados\n            </p>\n\n            <p id=\"TMDB\">\n                 &copy; Dados dos Filmes / Séries - <a href=\"https://www.themoviedb.org/\" target=\"_blank\" ><img src='https://www.themoviedb.org/assets/2/v4/logos/v2/blue_square_1-5bdc75aaebeb75dc7ae79426ddd9be3b2be1e342510f8202baf6bffa71d7f5c4.svg'></img></a> \n            </p>\n\n            <p>\n                 &copy; Criador: <a href=\"https://www.linkedin.com/in/samuel-ricardo-cabral/\" target=\"_blank\">Samuel Ricardo Cabral de Barros</a> - Programmer\n           </p>\n\n           <p>\n               Dá uma olhada por aqui :)\n           </p>\n\n           <p>\n            || <a href=\"https://www.linkedin.com/in/samuel-ricardo-cabral/\" target=\"_blank\">LinkedIn</a> || <a href=\"https://github.com/Samuel-Ricardo\" target=\"_blank\">GitHub</a> || <a href=\"https://www.upwork.com/o/profiles/users/~013ef0c3301efacbdd/\" target=\"_blank\">Upwork</a> || <a href=\"https://www.99freelas.com.br/user/Samuel_Ricardo\" target=\"_blank\">99Freelas</a> || \n           </p>\n\n           <p>\n           GitHub do Projeto <a href=\"https://github.com/Samuel-Ricardo/Netflix-Clone--Home-Page\" target=\"_blank\">Netflix-Clone</a>\n           </p>\n\n      </footer>\n    </div>\n  )\n}","D:\\Visual Studio Code\\Projects\\Recreate-Netflix\\netflix-app\\src\\Connections\\TMDB.js",["42"],"const  {API_KEY, API_BASE} = require(\"../config/TMDB.json\")\r\nconst CONFIG = `api_key=${API_KEY}&language=pt-BR`\r\n\r\nconst basicFetch = async (endPoint) => {\r\n\r\n    const req = await fetch(`${API_BASE}${endPoint}`)\r\n    const json = await req.json();\r\n\r\n    return json\r\n}\r\n\r\nexport default {\r\n\r\n    getHomeList: async () => {\r\n\r\n        return [\r\n    \r\n            {\r\n                slug: 'original',\r\n                title: 'Originais da Netflix',\r\n                items: await basicFetch(`/discover/tv?${CONFIG}&with_network=213`)\r\n            },\r\n            \r\n            {\r\n                slug: 'trending',\r\n                title: 'Recomendados',\r\n                items: await basicFetch(`/trending/all/week?${CONFIG}`)\r\n            },\r\n    \r\n            {\r\n                slug: 'top rated',\r\n                title: 'Em Alta',\r\n                items: await basicFetch(`/movie/top_rated?${CONFIG}`)\r\n            },\r\n    \r\n            {\r\n                slug: 'Action',\r\n                title: 'Ação',\r\n                items: await basicFetch(`/discover/movie?with_genres=28&${CONFIG}`)\r\n            },\r\n    \r\n            {\r\n                slug: 'comedy',\r\n                title: 'Comédia',\r\n                items: await basicFetch(`/discover/movie?with_genres=35&${CONFIG}`)\r\n            },\r\n            \r\n            {\r\n                slug: 'horror',\r\n                title: 'Terror',\r\n                items: await basicFetch(`/discover/movie?with_genres=27&${CONFIG}`)\r\n            },\r\n            \r\n            {\r\n                slug: 'romance',\r\n                title: 'Romance',\r\n                items: await basicFetch(`/discover/movie?with_genres=10749&${CONFIG}`)\r\n            },\r\n            \r\n            {\r\n                slug: 'documentary',\r\n                title: 'Documentario',\r\n                items: await basicFetch(`/discover/movie?with_genres=99&${CONFIG}`)\r\n            },\r\n        ];\r\n    },\r\n\r\n    getInfo: async (id, type) => {\r\n\r\n        //type - movie // tv(serie)\r\n\r\n        let info = {}\r\n\r\n        if(id){\r\n            if(type){\r\n                info = await basicFetch(`/${type}/${id}?${CONFIG}`)\r\n            }\r\n        }\r\n        return info;\r\n    }\r\n    \r\n}","D:\\Visual Studio Code\\Projects\\Recreate-Netflix\\netflix-app\\src\\Components\\FeatureMovie\\index.jsx",["43"],"import React from 'react';\r\n\r\nimport './FeatureMovie.css';\r\n\r\nexport default ({movie}) =>{\r\n    \r\n    const movieDate = new Date(movie.first_air_date)\r\n    const genres = []\r\n\r\n    for (let cont in movie.genres ){\r\n        genres.push(movie.genres[cont].name)\r\n    }\r\n\r\n    return (\r\n\r\n\r\n    \r\n\r\n    <section className=\"Featured\" style={{\r\n        backgroundSize : 'cover',\r\n        backgroundPosition : 'center',\r\n        backgroundImage: `url(https://image.tmdb.org/t/p/original${movie.backdrop_path})`\r\n    }}>\r\n\r\n    <div className=\"Featured--Vertical-Gradient\">\r\n        <div className=\"Featured--Horizontal-Gradient\">\r\n\r\n            <div className=\"Featured--Name\">\r\n                {movie.original_name}\r\n            </div>\r\n\r\n            <div className=\"Featured--Info\">\r\n                <div className=\"Featured--Rated\">\r\n                {movie.vote_average * 10}%\r\n                </div>\r\n\r\n                <div className=\"Featured--Year\">\r\n                    {movieDate.getFullYear()}\r\n                </div>\r\n\r\n                <div className=\"Featured--Seasons\">\r\n                    {movie.number_of_seasons} temporada{movie.number_of_seasons !== 1 ? \"s\" : ''}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"Featured--Description\">\r\n              {movie.overview}  \r\n            </div>\r\n\r\n            <div className=\"Featured--Buttons\">\r\n                \r\n                <a href={`/wacht/${movie.id}`} className=\"Featured--WatchButton\"> ► Play</a>\r\n                <a href={`/list/add/${movie.id}`} className=\"Featured--MyListButton\"> + Minha Lista</a>\r\n                \r\n            </div>\r\n\r\n            <div className=\"Featured--Genres\">\r\n                <strong>Genres: </strong>{genres.join(', ')}\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    </section>\r\n )\r\n}","D:\\Visual Studio Code\\Projects\\Recreate-Netflix\\netflix-app\\src\\Components\\MovieRow\\index.jsx",["44"],"D:\\Visual Studio Code\\Projects\\Recreate-Netflix\\netflix-app\\src\\Components\\Header\\index.jsx",["45","46","47"],"import React from 'react'\r\nimport './Header.css'\r\n\r\nexport default ({isBlack}) => {\r\n\r\n    return (\r\n        \r\n        <header className={isBlack ? 'Black' : 'Gradient'}>\r\n\r\n            <div className=\"Header--Logo\">\r\n\r\n                <a href=\"/\">\r\n                    <img src= 'https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/170px-Netflix_2015_logo.svg.png'></img>\r\n                </a>\r\n\r\n            </div>\r\n            \r\n            <div className=\"Header--User\">\r\n\r\n                <a href=\"/\">\r\n                    <img src= 'https://i.pinimg.com/originals/30/db/47/30db479e1558c3ed46b4ed23b3cd98ae.png'></img>\r\n                </a>\r\n\r\n            </div>\r\n\r\n        </header>\r\n    )\r\n}",{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":13,"column":1,"nodeType":"54","endLine":119,"endColumn":2},{"ruleId":"55","severity":1,"message":"56","line":97,"column":53,"nodeType":"57","endLine":97,"endColumn":108},{"ruleId":"58","severity":1,"message":"59","line":97,"column":108,"nodeType":"57","endLine":97,"endColumn":250},{"ruleId":"55","severity":1,"message":"56","line":101,"column":34,"nodeType":"57","endLine":101,"endColumn":111},{"ruleId":"55","severity":1,"message":"56","line":109,"column":16,"nodeType":"57","endLine":109,"endColumn":93},{"ruleId":"55","severity":1,"message":"56","line":109,"column":109,"nodeType":"57","endLine":109,"endColumn":169},{"ruleId":"55","severity":1,"message":"56","line":109,"column":183,"nodeType":"57","endLine":109,"endColumn":270},{"ruleId":"55","severity":1,"message":"56","line":109,"column":284,"nodeType":"57","endLine":109,"endColumn":359},{"ruleId":"55","severity":1,"message":"56","line":113,"column":30,"nodeType":"57","endLine":113,"endColumn":115},{"ruleId":"52","severity":1,"message":"60","line":12,"column":1,"nodeType":"54","endLine":82,"endColumn":2},{"ruleId":"52","severity":1,"message":"53","line":5,"column":1,"nodeType":"54","endLine":65,"endColumn":2},{"ruleId":"52","severity":1,"message":"53","line":7,"column":1,"nodeType":"54","endLine":37,"endColumn":2},{"ruleId":"52","severity":1,"message":"53","line":4,"column":1,"nodeType":"54","endLine":28,"endColumn":2},{"ruleId":"58","severity":1,"message":"59","line":13,"column":21,"nodeType":"57","endLine":13,"endColumn":145},{"ruleId":"58","severity":1,"message":"59","line":21,"column":21,"nodeType":"57","endLine":21,"endColumn":110},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","Assign object to a variable before exporting as module default","no-global-assign","no-unsafe-negation"]